@mixin scroll-bar($height: 4px, $width: 4px, $color: #2e2e30) {
  &::-webkit-scrollbar {
    appearance: none;
    height: $height;
    width: $width;
    background: inherit;
  }
  &::-webkit-scrollbar-thumb {
    appearance: none;
    background: $color;
    border-radius: 8px;
  }
}
/**************************
For Padding With safe-area
***************************/
@mixin Padding($value, $type: null) {
  @if $type == null {
    padding-left: calc(max($value, env(safe-area-inset-left)));
    padding-right: calc(max($value, env(safe-area-inset-right)));
    padding-top: calc(max($value, env(safe-area-inset-top)));
    padding-bottom: calc(max($value, env(safe-area-inset-bottom)));
  }
  @if $type == "top" {
    padding-top: calc(max($value, env(safe-area-inset-top)));
  }
  @if $type == "left" {
    padding-left: calc(max($value, env(safe-area-inset-top)));
  }
  @if $type == "right" {
    padding-right: calc(max($value, env(safe-area-inset-top)));
  }
  @if $type == "bottom" {
    padding-bottom: calc(max($value, env(safe-area-inset-top)));
  }
}
/**************************
Easy Media Quries
***************************/
@mixin mediaQuery($min: null, $max: null, $rotate: null) {
  /**************************
  CHECK FOR MIN WIDTH
  ***************************/
  @if $min != null and $max == null and $rotate == null {
    @media screen and (min-device-width: $min) {
      @content;
    }
  }
  /**************************
  CHECK FOR MAX WIDTH
  ***************************/
  @if $max != null and $min == null and $rotate == null {
    @media screen and (max-device-width: $max) {
      @content;
    }
  }
  /**************************
  CHECK FOR ORIENTATION
  ***************************/
  @if $min != null and $max != null and $rotate == null {
    @media screen and (min-device-width: $min) and (max-device-width: $max) {
      @content;
    }
  }
  // // Check For Orientation
  // @if $rotate == portrait and $min != null and $max != null {
  //   @media screen and (min-device-width: $min) and (max-device-width: $max) and (orientation: portrait) {
  //     @content;
  //   }
  // } @else if $rotate == landscape and $min != null and $max != null {
  //   @media screen and (min-device-width: $min) and (max-device-width: $max) and (orientation: landscape) {
  //     @content;
  //   }
  // }
}

@mixin center {
  display: flex;
  align-items: center;
  place-content: center;
}

// //////////////////////////////////////////////////
// //////////////// grid Style /////////////////////
// /// ////////////////////////////////////////////
// /// Grid system
// //
// // Generate semantic grid columns with these mixins.

// @mixin make-container($gutter: $grid-gutter-width) {
//   width: 100%;
//   padding-right: $gutter * 0.5;
//   padding-left: $gutter * 0.5;
//   margin-right: auto;
//   margin-left: auto;
// }

// @mixin make-row($gutter: $grid-gutter-width) {
//   display: flex;
//   flex-wrap: wrap;
//   margin-right: -$gutter * 0.5;
//   margin-left: -$gutter * 0.5;
// }

// // For each breakpoint, define the maximum width of the container in a media query
// @mixin make-container-max-widths(
//   $max-widths: $container-max-widths,
//   $breakpoints: $grid-breakpoints
// ) {
//   @each $breakpoint, $container-max-width in $max-widths {
//     @include media-breakpoint-up($breakpoint, $breakpoints) {
//       max-width: $container-max-width;
//     }
//   }
//   @include deprecate("The `make-container-max-widths` mixin", "1.2");
// }

// @mixin make-col-ready($gutter: $grid-gutter-width) {
//   position: relative;
//   // Prevent columns from becoming too narrow when at smaller grid tiers by
//   // always setting `width: 100%;`. This works because we use `flex` values
//   // later on to override this initial width.
//   width: 100%;
//   padding-right: $gutter * 0.5;
//   padding-left: $gutter * 0.5;
// }

// @mixin make-col($size, $columns: $grid-columns) {
//   flex: 0 0 percentage(divide($size, $columns));
//   // Add a `max-width` to ensure content within each column does not blow out
//   // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
//   // do not appear to require this.
//   max-width: percentage(divide($size, $columns));
// }

// @mixin make-col-auto() {
//   flex: 0 0 auto;
//   width: auto;
//   max-width: 100%; // Reset earlier grid tiers
// }

// @mixin make-col-offset($size, $columns: $grid-columns) {
//   $num: divide($size, $columns);
//   margin-left: if($num == 0, 0, percentage($num));
// }

// // Row columns
// //
// // Specify on a parent element(e.g., .row) to force immediate children into NN
// // numberof columns. Supports wrapping to new lines, but does not do a Masonry
// // style grid.
// @mixin row-cols($count) {
//   > * {
//     flex: 0 0 divide(100%, $count);
//     max-width: divide(100%, $count);
//   }
// }
